
==================== FINAL INTERFACE ====================
2016-05-22 09:52:54.398184 UTC

interface main@main:HW4 7103
  interface hash: 8f01464d1001f5961cbbed90b8303337
  ABI hash: a9ad154c83e7a5f1abde0bb4e502c4ad
  export-list hash: f731bc913eb950bf4bd294f7ff766ff0
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: f08236f1368423c3b6414cffd810e26e
  sig of: Nothing
  used TH splices: False
  where
exports:
  HW4.insertValue
  HW4.isEulerPathExist
  HW4.paths
  HW4.slice
  HW4.Graph
module dependencies:
package dependencies: base-4.8.2.0* ghc-prim-0.4.0.0
                      integer-gmp-1.0.0.0
orphans: base-4.8.2.0:GHC.Base base-4.8.2.0:GHC.Float
family instance modules: base-4.8.2.0:Control.Applicative
                         base-4.8.2.0:Data.Either base-4.8.2.0:Data.Monoid
                         base-4.8.2.0:Data.Type.Equality base-4.8.2.0:GHC.Generics
import  -/  base-4.8.2.0:GHC.List ab53ad3f819f64915f1f91641b6e3255
import  -/  base-4.8.2.0:GHC.Num 099c29dfc2c0e3c154d011e91b663293
import  -/  base-4.8.2.0:Prelude 0f9dd1bcfa413fa55bb6dca444292bf6
import  -/  ghc-prim-0.4.0.0:GHC.Classes e1f4ff80f7b5262008a595d29986fb18
00851d156996981942967ceb10f32467
  $winsertValue :: a -> [a] -> GHC.Prim.Int# -> [a]
  {- Arity: 3, HasNoCafRefs, Strictness: <L,U><L,1*U><S,U>,
     Inline: [0],
     Unfolding: (\ @ a w :: a w1 :: [a] ww :: GHC.Prim.Int# ->
                 letrec {
                   $wcountdown :: GHC.Prim.Int# -> [a] -> [a]
                     {- Arity: 2, Strictness: <S,1*U><L,1*U>, Inline: [0] -}
                   = \ ww1 :: GHC.Prim.Int# w2 :: [a] ->
                     case ww1 of ds {
                       DEFAULT
                       -> case w2 of wild {
                            [] -> GHC.Types.[] @ a
                            : x xs -> GHC.Types.: @ a x ($wcountdown (GHC.Prim.-# ds 1) xs) }
                       0 -> GHC.Types.: @ a w ($wcountdown ww w2) }
                 } in
                 $wcountdown ww w1) -}
a67f3cdb6d0c52df2f23671669874aed
  $wslice :: [a] -> GHC.Prim.Int# -> GHC.Prim.Int# -> [a]
  {- Arity: 3, HasNoCafRefs, Strictness: <L,1*U><L,U><L,U>,
     Inline: [0],
     Unfolding: (\ @ a
                   w :: [a]
                   ww :: GHC.Prim.Int#
                   ww1 :: GHC.Prim.Int# ->
                 let {
                   y :: GHC.Prim.Int# = GHC.Prim.+# (GHC.Prim.-# ww1 ww) 1
                 } in
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.<# 0 y) of wild {
                   GHC.Types.False -> GHC.Types.[] @ a
                   GHC.Types.True
                   -> case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.<=# ww 0) of wild1 {
                        GHC.Types.False
                        -> GHC.List.$wunsafeTake @ a y (HW4.$wunsafeDrop @ a ww w)
                        GHC.Types.True -> GHC.List.$wunsafeTake @ a y w } }) -}
9488e1667279fc433147b0d043a6f9f7
  $wunsafeDrop :: GHC.Prim.Int# -> [a1] -> [a1]
  {- Arity: 2, HasNoCafRefs, Strictness: <L,1*U><S,1*U>,
     Inline: [0] -}
7a55973e6a4181f841c014d00224708e
  type Graph = [(GHC.Types.Int, [GHC.Types.Int])]
426a63b9806fbcefe0852dd598815dd0
  insertValue :: a -> [a] -> GHC.Types.Int -> [a]
  {- Arity: 3, HasNoCafRefs, Strictness: <L,U><L,1*U><S(S),U(U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ @ a w :: a w1 :: [a] w2 :: GHC.Types.Int ->
                 case w2 of ww { GHC.Types.I# ww1 ->
                 HW4.$winsertValue @ a w w1 ww1 }) -}
6d0868b057a37972e041d8c8d915d7f2
  isEulerPathExist :: HW4.Graph -> GHC.Types.Bool
  {- Strictness: b -}
9bbca9c324a3b1473407c6760b32dd88
  paths :: GHC.Classes.Eq a => a -> a -> [(a, a)] -> [a]
  {- Arity: 1, Strictness: <B,A>b,
     Unfolding: InlineRule (1, True, True)
                (\ @ a $dEq :: GHC.Classes.Eq a -> HW4.paths1 @ a) -}
7107e609ecfa55b0b5f0bc73b3c518d6
  paths1 :: a -> a -> [(a, a)] -> [a]
  {- Strictness: b -}
5980e97275a240c1c5bcbcee894428b2
  slice :: [a] -> GHC.Types.Int -> GHC.Types.Int -> [a]
  {- Arity: 3, HasNoCafRefs, Strictness: <L,1*U><S,1*U(U)><S,1*U(U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ @ a w :: [a] w1 :: GHC.Types.Int w2 :: GHC.Types.Int ->
                 case w1 of ww { GHC.Types.I# ww1 ->
                 case w2 of ww2 { GHC.Types.I# ww3 ->
                 HW4.$wslice @ a w ww1 ww3 } }) -}
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: safe
require own pkg trusted: False

